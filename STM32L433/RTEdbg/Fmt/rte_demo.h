#ifndef RTE_RTE_DEMO_H
#define RTE_RTE_DEMO_H
/* rte_demo.h - format definitions for the source file "rtedbg_demo.c" */

// FILTER(F_DEMO_MSG1)
// FILTER(F_DEMO_MSG2, "Filter demo 2")
// FILTER(F_DEMO_MSG3, "Filter demo 3")
// MEMO(M_TEST, 9)
// MEMO(M_MEMO1)
// MEMO(M_MEMO2)
// MEMO(M_MEMO3)

/* Examples of filter definitions - not used in this demo */
// FILTER(F_RTOS_TASK,  "RTOS tasks")
// FILTER(F_RTOS_QUEUE, "RTOS queues")
// FILTER(F_RTOS_MUTEX, "RTOS semaphores and mutexes")

// OUT_FILE(TEST, "test.csv", "w", "Tick;Value1;Value2;Calculation[us]\n")
// OUT_FILE(BATT_DATA, "Battery data.txt", "w")
// OUT_FILE(BIN_FILE, "Binary_data.bin", "wb")

// EXT_MSG0_4_SEQUENCE "Sequence #%<M_TEST>d = %[0:32]{0-STOP|1-RUN|2-IDDLE|3-FAULT|Undefined}Y, cycle time = %[T](*1e6)|Cycle time [ms]|g us"
// MSG0_TIMING "rte_msg0() execution time: %[t-EXT_MSG0_4_SEQUENCE](*1e6)g us"

// MSG3_UNION_DEMO
// >TEST "%<M_MEMO2>N;%<M_MEMO2>t;%<M_MEMO3>T;"
// >>TEST "%[M_TEST](-1*-1e2)g;%.3f;%.3f;%.3f"
// >TEST "\n"

// MSG1_STRUCT1  "Hex dump: 1H = %1H\nBitfield: %[3u]u, %[5u]u, %[24i]d\n  %N(10*N=%[N](*10)u), t+10=%|T_stamp|t(%[t](+10)g), (T+1)*5=%T(%[T]|dTstamp|(+1*5)g)"

// MSGN_STRING "String dump: %1H\n  Full string: \"%s\", characters 3-7: \"%[16:48]s\""

// MSG1_ERROR_HANDLER "Function Error_Handler() called from address 0x%08x"

// MSG1_FLOAT "Print using rte_float1() = %g"

// FMT_ALIGN ( 256 )

// MSGN2_DOUBLE "Print PI * 1e9: %[64f]10.10f"

// FMT_START( 316 )

// MSG2_UNSIGNEDSCALED
// "Battery voltage: %[32](*0.01)|Battery voltage[V]|.2f V, battery temperature: %[32u](*0.1).1fÂ°C"

// MSG2_FLOAT
// "Counter: %3u(0x%[0:32]X), float value: %g, same value +3*0.1: %[32:32f](+3.*0.1).4f"

// MSGN2_DATA
// "\nHex dump: %4H"
// "\n  Two float values: %[0:32]g, %g"
// "\n  llo:%[0:64]llo, li:%[0:32]li, E:%[0:32f]E, e:%[0:32f]e, "
// "\n  f:%[0:32f]f, F:%[0:32f]F, g:%[0:32f]g, G:%[0:32f]G, "
// "\n  #f:%[0:32f]#f, #F:%[0:32f]#F, #g:%[0:32f]#g, #G:%[0:32f]#G, "
// "\n  a:%[0:32f]a, A:%[0:32f]A"
// "\n  llX:%[0:64]llX, lx:%[0:64]lx, llu:%[0:64]llu, lu:%[0:64]lu"
// "\n  lld:%[0:64]+lld, ld:%[0:64]-ld"
// "\n  bin:%[0:64]B"
// "\n  print one value: %[0:16]u, and hex dump the remainder of message: %2H"

// MSGN3_BATT_DATA
// >BATT_DATA "%N: Battery voltage = %[16u](*0.01).2f V, current = %[16i](*0.01).2f\n"
// >BATT_DATA "Charged Ah = %[16](*.10).1f, discharged Ah = %[16](*0.1).1f\n"
// >BATT_DATA "Temperatures: %[8u](-100*0.5).1f, %[8u](-100*0.5).1f, SOC = %[16](*.10).1f\n"

// MSG1_BIN_VALUE "\n   Test binary (0b0111010100001111): 0b%[0:32]B = 0x%[0:32]X"
//                "\n   binary 0b%%[4:9]B = 0b%[4:9]B"

// MSG1_TICK  "uwTick = %d, %[t-MSG3_UNION_DEMO]|Tick|9g, periode: %T"
// MSG1_CPU_RESET      "Reset status register RCC_RSR: 0x%08x"
// "%[19:1]{ |\n   CPU domain power-switch (ePOD2) reset occurred (default after power-on reset)}Y"
// "%[21:1]{ |\n   BOR reset occurred (default after power-on reset)}Y"
// "%[22:1]{ |\n   Reset from pin occurred (default after power-on reset)}Y"
// "%[23:1]{ |\n   POR/PDR reset occurred (default after power-on reset)}Y"
// "%[24:1]{ |\n   System reset has been generated by the CPU}Y"
// "%[26:1]{ |\n   Independent watchdog (IWDG) reset occurred}Y"
// "%[28:1]{ |\n   Window watchdog reset occurred from WWDG}Y"
// "%[30:1]{ |\n   Illegal CD DStop or CD DStop2 or CPU CStop reset occurred}Y"

// MSG1_CPU_FREQUENCY  "CPU clock frequency = %[32](*1e-6)g MHz"

// EXT_MSG1_3_DEMO   "Counter: %u, ext_data (counter/4)&7 = %d"

// MSG1_FLOAT16_A "%[16f]8g, %[16f]8g"
// MSG1_FLOAT16_B "%[16f]8g, %[16f]8g"
// MSG1_FLOAT16_C "%[16f]8g, %[16f]8g, rte_msg1(exec.time) = %[t-MSG1_FLOAT16_A](*0.5e9)|rte_msg1(ns)|u ns"

// MSG0_EVENT1 "Event test"

// EXT_MSG0_3_EVENTX "%u"

// MSGX_SAVE_BIN_DATA "%[24u]u"
//    >BIN_FILE "%W"
#endif
